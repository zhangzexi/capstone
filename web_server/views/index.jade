include mixins
doctype html
html
  head
    title
    link(rel='stylesheet', href='/bootstrap-3.3.7-dist/css/bootstrap.min.css')
    link(rel='stylesheet', href='/bootstrap-3.3.7-dist/css/bootstrap-theme.min.css')
    //link(href="//maxcdn.bootstrapcdn.com/bootswatch/3.3.0/flatly/bootstrap.min.css", rel="stylesheet")
  body

    nav.navbar.navbar-inverse.navbar-fixed-top(role='navigation')
      .container
        script( src='//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js' )
        script( src='//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js' )
        // Brand and toggle get grouped for better mobile display
        .navbar-header
          button.navbar-toggle(type='button', data-toggle='collapse', data-target='#bs-example-navbar-collapse-1')
            span.sr-only Navigation
            span.icon-bar
            span.icon-bar
            span.icon-bar
          a.navbar-brand(href='/') BroncosEstimator
        // Collect the nav links, forms, and other content for toggling
        #bs-example-navbar-collapse-1.collapse.navbar-collapse
          ul.nav.nav-pills.navbar-right
            li
              a(href='/') Home
            li
              a(href='/about') About
            li
              a(href='/estimator') Estimator
            li.active(role='presentation')
              if logged_in_user
                a(href='/logout') Log out
              else
                a(href='/login') Sign in

            li
                +nav_item_dropdown("#")(label="My")
                    +nav_item("/profile" , "active") Profile


    div(style='margin-top: 10%')
      img(src='/logo1.png', style='width:500px;height:220px;display: block; margin-left: auto; margin-right: auto')
      br
      br
      br
      .container
        .col-md-2
        .col-md-8
          form#search(method='get', action='/search')
            .col-md-10
              input#autocomplete.form-control(onfocus='geolocate()', type='text',name='search_text', placeholder='Search by City/State or Zipcode', style='font-size: 120%;')
              //input#search_text.form-control(name='search_text', placeholder='Search by City/State or Zipcode', style='font-size: 120%;')
            .col-md-2
              input.form-control.btn(type='submit', value='Search', style='font-size: 120%; background-color: #4285f4; color: white;')
        .col-md-2
      .container
        //.col-md-12
        //    input#street_number.field(disabled='true')
        //    input#route.field(disabled='true')
        //    input#locality.field(disabled='true')
        //    input#administrative_area_level_1.field(disabled='true')
        //    input#postal_code.field(disabled='true')
        //    input#country.field(disabled='true')





        script.
            // This example displays an address form, using the autocomplete feature
            // of the Google Places API to help users fill in the information.
            // This example requires the Places library. Include the libraries=places
            // parameter when you first load the API. For example:
            // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
            var placeSearch, autocomplete;
            var componentForm = {
                street_number: 'short_name',
                route: 'long_name',
                locality: 'long_name',
                administrative_area_level_1: 'short_name',
                country: 'long_name',
                postal_code: 'short_name'
            };
            function initAutocomplete() {
                // Create the autocomplete object, restricting the search to geographical
                // location types.
                autocomplete = new google.maps.places.Autocomplete(
                    /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
                    {types: ['geocode']});
                // When the user selects an address from the dropdown, populate the address
                // fields in the form.
                autocomplete.addListener('place_changed', fillInAddress);
            }
            function fillInAddress() {
                // Get the place details from the autocomplete object.
                var place = autocomplete.getPlace();
                for (var component in componentForm) {
                    document.getElementById(component).value = '';
                    document.getElementById(component).disabled = false;
                }
                // Get each component of the address from the place details
                // and fill the corresponding field on the form.
                for (var i = 0; i < place.address_components.length; i++) {
                    var addressType = place.address_components[i].types[0];
                    if (componentForm[addressType]) {
                        var val = place.address_components[i][componentForm[addressType]];
                        document.getElementById(addressType).value = val;
                    }
                }
            }
            // Bias the autocomplete object to the user's geographical location,
            // as supplied by the browser's 'navigator.geolocation' object.
            function geolocate() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var geolocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var circle = new google.maps.Circle({
                            center: geolocation,
                            radius: position.coords.accuracy
                        });
                        autocomplete.setBounds(circle.getBounds());
                    });
                }
            }
        script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDpZGZWXqyRWeBvLjmMf5LxC3kvGE7nXMc&libraries=places&callback=initAutocomplete', async='', defer='')